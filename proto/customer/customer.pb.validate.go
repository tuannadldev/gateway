// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: proto/customer/customer.proto

package customer

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Customer with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Customer) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Customer with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CustomerMultiError, or nil
// if none found.
func (m *Customer) ValidateAll() error {
	return m.validate(true)
}

func (m *Customer) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Email

	// no validation rules for Age

	// no validation rules for Address

	if len(errors) > 0 {
		return CustomerMultiError(errors)
	}

	return nil
}

// CustomerMultiError is an error wrapping multiple validation errors returned
// by Customer.ValidateAll() if the designated constraints aren't met.
type CustomerMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CustomerMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CustomerMultiError) AllErrors() []error { return m }

// CustomerValidationError is the validation error returned by
// Customer.Validate if the designated constraints aren't met.
type CustomerValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CustomerValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CustomerValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CustomerValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CustomerValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CustomerValidationError) ErrorName() string { return "CustomerValidationError" }

// Error satisfies the builtin error interface
func (e CustomerValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCustomer.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CustomerValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CustomerValidationError{}

// Validate checks the field values on GetCustomerRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetCustomerRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCustomerRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCustomerRequestMultiError, or nil if none found.
func (m *GetCustomerRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCustomerRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return GetCustomerRequestMultiError(errors)
	}

	return nil
}

// GetCustomerRequestMultiError is an error wrapping multiple validation errors
// returned by GetCustomerRequest.ValidateAll() if the designated constraints
// aren't met.
type GetCustomerRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCustomerRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCustomerRequestMultiError) AllErrors() []error { return m }

// GetCustomerRequestValidationError is the validation error returned by
// GetCustomerRequest.Validate if the designated constraints aren't met.
type GetCustomerRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCustomerRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCustomerRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCustomerRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCustomerRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCustomerRequestValidationError) ErrorName() string {
	return "GetCustomerRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetCustomerRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCustomerRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCustomerRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCustomerRequestValidationError{}

// Validate checks the field values on GetCustomerResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetCustomerResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCustomerResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCustomerResponseMultiError, or nil if none found.
func (m *GetCustomerResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCustomerResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCustomer()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetCustomerResponseValidationError{
					field:  "Customer",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetCustomerResponseValidationError{
					field:  "Customer",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCustomer()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetCustomerResponseValidationError{
				field:  "Customer",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetCustomerResponseMultiError(errors)
	}

	return nil
}

// GetCustomerResponseMultiError is an error wrapping multiple validation
// errors returned by GetCustomerResponse.ValidateAll() if the designated
// constraints aren't met.
type GetCustomerResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCustomerResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCustomerResponseMultiError) AllErrors() []error { return m }

// GetCustomerResponseValidationError is the validation error returned by
// GetCustomerResponse.Validate if the designated constraints aren't met.
type GetCustomerResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCustomerResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCustomerResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCustomerResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCustomerResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCustomerResponseValidationError) ErrorName() string {
	return "GetCustomerResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetCustomerResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCustomerResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCustomerResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCustomerResponseValidationError{}

// Validate checks the field values on CreateCustomerRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateCustomerRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateCustomerRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateCustomerRequestMultiError, or nil if none found.
func (m *CreateCustomerRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateCustomerRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Email

	// no validation rules for Age

	// no validation rules for Address

	if len(errors) > 0 {
		return CreateCustomerRequestMultiError(errors)
	}

	return nil
}

// CreateCustomerRequestMultiError is an error wrapping multiple validation
// errors returned by CreateCustomerRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateCustomerRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateCustomerRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateCustomerRequestMultiError) AllErrors() []error { return m }

// CreateCustomerRequestValidationError is the validation error returned by
// CreateCustomerRequest.Validate if the designated constraints aren't met.
type CreateCustomerRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateCustomerRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateCustomerRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateCustomerRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateCustomerRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateCustomerRequestValidationError) ErrorName() string {
	return "CreateCustomerRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateCustomerRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateCustomerRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateCustomerRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateCustomerRequestValidationError{}

// Validate checks the field values on CreateCustomerResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateCustomerResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateCustomerResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateCustomerResponseMultiError, or nil if none found.
func (m *CreateCustomerResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateCustomerResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCustomer()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateCustomerResponseValidationError{
					field:  "Customer",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateCustomerResponseValidationError{
					field:  "Customer",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCustomer()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateCustomerResponseValidationError{
				field:  "Customer",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateCustomerResponseMultiError(errors)
	}

	return nil
}

// CreateCustomerResponseMultiError is an error wrapping multiple validation
// errors returned by CreateCustomerResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateCustomerResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateCustomerResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateCustomerResponseMultiError) AllErrors() []error { return m }

// CreateCustomerResponseValidationError is the validation error returned by
// CreateCustomerResponse.Validate if the designated constraints aren't met.
type CreateCustomerResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateCustomerResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateCustomerResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateCustomerResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateCustomerResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateCustomerResponseValidationError) ErrorName() string {
	return "CreateCustomerResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateCustomerResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateCustomerResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateCustomerResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateCustomerResponseValidationError{}

// Validate checks the field values on UpdateCustomerRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateCustomerRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateCustomerRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateCustomerRequestMultiError, or nil if none found.
func (m *UpdateCustomerRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateCustomerRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Email

	// no validation rules for Age

	// no validation rules for Address

	if len(errors) > 0 {
		return UpdateCustomerRequestMultiError(errors)
	}

	return nil
}

// UpdateCustomerRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateCustomerRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateCustomerRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateCustomerRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateCustomerRequestMultiError) AllErrors() []error { return m }

// UpdateCustomerRequestValidationError is the validation error returned by
// UpdateCustomerRequest.Validate if the designated constraints aren't met.
type UpdateCustomerRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateCustomerRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateCustomerRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateCustomerRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateCustomerRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateCustomerRequestValidationError) ErrorName() string {
	return "UpdateCustomerRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateCustomerRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateCustomerRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateCustomerRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateCustomerRequestValidationError{}

// Validate checks the field values on UpdateCustomerResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateCustomerResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateCustomerResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateCustomerResponseMultiError, or nil if none found.
func (m *UpdateCustomerResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateCustomerResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCustomer()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateCustomerResponseValidationError{
					field:  "Customer",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateCustomerResponseValidationError{
					field:  "Customer",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCustomer()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateCustomerResponseValidationError{
				field:  "Customer",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateCustomerResponseMultiError(errors)
	}

	return nil
}

// UpdateCustomerResponseMultiError is an error wrapping multiple validation
// errors returned by UpdateCustomerResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdateCustomerResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateCustomerResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateCustomerResponseMultiError) AllErrors() []error { return m }

// UpdateCustomerResponseValidationError is the validation error returned by
// UpdateCustomerResponse.Validate if the designated constraints aren't met.
type UpdateCustomerResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateCustomerResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateCustomerResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateCustomerResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateCustomerResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateCustomerResponseValidationError) ErrorName() string {
	return "UpdateCustomerResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateCustomerResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateCustomerResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateCustomerResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateCustomerResponseValidationError{}
